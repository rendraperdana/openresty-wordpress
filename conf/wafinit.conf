access_by_lua_block {
                local lua_resty_waf = require "resty.waf"
                local waf = lua_resty_waf:new()

                waf:set_option("debug", true)
                waf:set_option("mode", "ACTIVE")	

		waf:set_option("score_threshold", 8)

		waf:set_option("allowed_content_types", "text/html", "text/json", "application/json")
		waf:set_option("process_multipart_body", false)
		waf:set_option("res_body_max_size", 1024 * 1024 * 10)

		waf:set_option("event_log_target", "file")
		waf:set_option("event_log_target_path", "/var/log/nginx/waf.log")	
	
		waf:set_option("event_log_level", ngx.WARN)
		waf:set_option("event_log_request_arguments", true)
		waf:set_option("event_log_request_headers", true)
		waf:set_option("event_log_request_body", true)
                waf:set_option("event_log_periodic_flush", 5)

	waf:exec()
}

header_filter_by_lua_block {
        local lua_resty_waf = require "resty.waf"

	local waf = lua_resty_waf:new()

	waf:exec()
}

body_filter_by_lua_block {
        local lua_resty_waf = require "resty.waf"

        local waf = lua_resty_waf:new()

	waf:exec()
}

log_by_lua_block {
        local lua_resty_waf = require "resty.waf"

	local waf = lua_resty_waf:new()

	waf:exec()
}
